schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type JournalEntry {
  journalContent: String
  journalDate: String!
  journalEntryId: String!
  journalLocation: String
}

type JournalEntryConnection {
  items: [JournalEntry]
  nextToken: String
}

type Mutation {
  createJournalEntry(input: CreateJournalEntryInput!): JournalEntry
  createSchedule(input: CreateScheduleInput!): Schedule
  createTodo(input: CreateTodoInput!): Todo
  createUser(input: CreateUserInput!): User
  deleteJournalEntry(input: DeleteJournalEntryInput!): JournalEntry
  deleteSchedule(input: DeleteScheduleInput!): Schedule
  deleteTodo(input: DeleteTodoInput!): Todo
  deleteUser(input: DeleteUserInput!): User
  updateJournalEntry(input: UpdateJournalEntryInput!): JournalEntry
  updateSchedule(input: UpdateScheduleInput!): Schedule
  updateTodo(input: UpdateTodoInput!): Todo
  updateUser(input: UpdateUserInput!): User
}

type Query {
  getJournalEntry(journalDate: String!, journalEntryId: String!): JournalEntry
  getSchedule(scheduleId: String!, scheduleName: String!): Schedule
  getTodo(todoDate: String!, todoId: String!): Todo
  getUser(userEmail: String!, userId: String!): User
  listJournalEntries(filter: TableJournalEntryFilterInput, limit: Int, nextToken: String): JournalEntryConnection
  listSchedules(filter: TableScheduleFilterInput, limit: Int, nextToken: String): ScheduleConnection
  listTodos(filter: TableTodoFilterInput, limit: Int, nextToken: String): TodoConnection
  listUsers(filter: TableUserFilterInput, limit: Int, nextToken: String): UserConnection
}

type Schedule {
  scheduleEndDate: AWSDateTime
  scheduleId: String!
  scheduleName: String!
  scheduleStartDate: AWSDateTime
}

type ScheduleConnection {
  items: [Schedule]
  nextToken: String
}

type Subscription {
  onCreateJournalEntry(journalContent: String, journalDate: String, journalEntryId: String, journalLocation: String): JournalEntry @aws_subscribe(mutations : ["createJournalEntry"])
  onCreateSchedule(scheduleEndDate: AWSDateTime, scheduleId: String, scheduleName: String, scheduleStartDate: AWSDateTime): Schedule @aws_subscribe(mutations : ["createSchedule"])
  onCreateTodo(todoDate: String, todoDescription: String, todoId: String, todoIsComplete: Boolean): Todo @aws_subscribe(mutations : ["createTodo"])
  onCreateUser(userEmail: String, userId: String, userName: String): User @aws_subscribe(mutations : ["createUser"])
  onDeleteJournalEntry(journalContent: String, journalDate: String, journalEntryId: String, journalLocation: String): JournalEntry @aws_subscribe(mutations : ["deleteJournalEntry"])
  onDeleteSchedule(scheduleEndDate: AWSDateTime, scheduleId: String, scheduleName: String, scheduleStartDate: AWSDateTime): Schedule @aws_subscribe(mutations : ["deleteSchedule"])
  onDeleteTodo(todoDate: String, todoDescription: String, todoId: String, todoIsComplete: Boolean): Todo @aws_subscribe(mutations : ["deleteTodo"])
  onDeleteUser(userEmail: String, userId: String, userName: String): User @aws_subscribe(mutations : ["deleteUser"])
  onUpdateJournalEntry(journalContent: String, journalDate: String, journalEntryId: String, journalLocation: String): JournalEntry @aws_subscribe(mutations : ["updateJournalEntry"])
  onUpdateSchedule(scheduleEndDate: AWSDateTime, scheduleId: String, scheduleName: String, scheduleStartDate: AWSDateTime): Schedule @aws_subscribe(mutations : ["updateSchedule"])
  onUpdateTodo(todoDate: String, todoDescription: String, todoId: String, todoIsComplete: Boolean): Todo @aws_subscribe(mutations : ["updateTodo"])
  onUpdateUser(userEmail: String, userId: String, userName: String): User @aws_subscribe(mutations : ["updateUser"])
}

type Todo {
  todoDate: String!
  todoDescription: String!
  todoId: String!
  todoIsComplete: Boolean!
}

type TodoConnection {
  items: [Todo]
  nextToken: String
}

type User {
  userEmail: String!
  userId: String!
  userName: String
}

type UserConnection {
  items: [User]
  nextToken: String
}

input CreateJournalEntryInput {
  journalContent: String
  journalDate: String!
  journalEntryId: String!
  journalLocation: String
}

input CreateScheduleInput {
  scheduleEndDate: AWSDateTime
  scheduleId: String!
  scheduleName: String!
  scheduleStartDate: AWSDateTime
}

input CreateTodoInput {
  todoDate: String!
  todoDescription: String!
  todoId: String!
  todoIsComplete: Boolean!
}

input CreateUserInput {
  userEmail: String!
  userId: String!
  userName: String
}

input DeleteJournalEntryInput {
  journalDate: String!
  journalEntryId: String!
}

input DeleteScheduleInput {
  scheduleId: String!
  scheduleName: String!
}

input DeleteTodoInput {
  todoDate: String!
  todoId: String!
}

input DeleteUserInput {
  userEmail: String!
  userId: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableJournalEntryFilterInput {
  journalContent: TableStringFilterInput
  journalDate: TableStringFilterInput
  journalEntryId: TableStringFilterInput
  journalLocation: TableStringFilterInput
}

input TableScheduleFilterInput {
  scheduleEndDate: TableStringFilterInput
  scheduleId: TableStringFilterInput
  scheduleName: TableStringFilterInput
  scheduleStartDate: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableTodoFilterInput {
  todoDate: TableStringFilterInput
  todoDescription: TableStringFilterInput
  todoId: TableStringFilterInput
  todoIsComplete: TableBooleanFilterInput
}

input TableUserFilterInput {
  userEmail: TableStringFilterInput
  userId: TableStringFilterInput
  userName: TableStringFilterInput
}

input UpdateJournalEntryInput {
  journalContent: String
  journalDate: String!
  journalEntryId: String!
  journalLocation: String
}

input UpdateScheduleInput {
  scheduleEndDate: AWSDateTime
  scheduleId: String!
  scheduleName: String!
  scheduleStartDate: AWSDateTime
}

input UpdateTodoInput {
  todoDate: String!
  todoDescription: String
  todoId: String!
  todoIsComplete: Boolean
}

input UpdateUserInput {
  userEmail: String!
  userId: String!
  userName: String
}
